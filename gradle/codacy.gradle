/*
 * Copyright (c) 2006-2017 DMDirc Developers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

def javaProjects() {
    allprojects.findAll { project -> project.plugins.hasPlugin('java') }
}

FileTree getJacocoClassDirs(Set<Project> projects) {
    def classDirs = fileTree(dir: "${buildDir}/classes/main")
    projects.each {
        classDirs += fileTree(dir: "${it.buildDir}/classes/main")
    }
    return classDirs
}

FileCollection getJacocoSrcDirs(Set<Project> projects) {
    Set srcDirs = sourceSets.main.java.srcDirs
    projects.each {
        srcDirs.add(it.sourceSets.main.java.srcDirs)
    }
    return files(srcDirs)
}

subprojects.each { evaluationDependsOn it.path }

afterEvaluate {
    task tests(dependsOn: javaProjects()*.test)

    task jacocoMerge(type: JacocoMerge) {
        javaProjects().each {
            subproject -> executionData subproject.test
        }
    }

    task jacocoCombinedTestReport(type: JacocoReport, dependsOn: jacocoMerge) {
        classDirectories = getJacocoClassDirs(javaProjects())
        sourceDirectories = getJacocoSrcDirs(javaProjects())
        executionData = files("${buildDir}/jacoco/jacocoMerge.exec")

        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoCombinedTestReport) {
        main = "com.codacy.CodacyCoverageReporter"
        classpath = configurations.codacy
        args = [
                "-l",
                "Java",
                "-r",
                "${buildDir}/reports/jacoco/jacocoCombinedTestReport/jacocoCombinedTestReport.xml"
        ]
    }
}